{"version":3,"sources":["components/Cats.js","components/Home.js","components/Cat.js","App.js","serviceWorker.js","index.js"],"names":["Cats","id","imageUrl","Col","xs","sm","md","Card","Img","variant","src","Body","Button","block","as","Link","to","Home","useState","breeds","setBreeds","breedSelected","setBreedSelect","catsList","setCatsList","isLoading","setIsLoading","loadVisible","setLoadVisible","count","setCount","firstLoad","useRef","location","useLocation","useEffect","fetchBreeds","params","queryString","parse","search","setBreedLocation","current","a","fetch","res","json","data","fetchCats","breed","className","Container","Row","Form","Group","controlId","Label","Control","onChange","e","target","value","disabled","map","item","key","name","Array","isArray","length","slice","cat","url","onClick","setTimeout","Cat","match","catDetails","setCat","catBreed","setCatBreed","pathname","replace","ok","fetchCat","Header","details","origin","temperament","description","App","basename","process","path","exact","component","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c0b91d00.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\n\nfunction Cats({id, imageUrl}) {\n  return (\n    <Col xs={12} sm={6} md={3}>\n    \t<Card>\n    \t  \t<Card.Img variant=\"top\" src={imageUrl} />\n    \t  \t<Card.Body>\n    \t  \t  \t<Button variant=\"primary\" block as={Link} to={`${id}`}>View Details</Button>\n    \t  \t</Card.Body>\n    \t</Card>\n    </Col>\n  );\n}\n\nexport default Cats;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport queryString from 'query-string';\n\nimport Cats from './Cats';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\n\nfunction Home() {\n\tconst [breeds, setBreeds] = useState([]);\n\tconst [breedSelected, setBreedSelect] = useState(\"\");\n\tconst [catsList, setCatsList] = useState([]);\n\tconst [isLoading, setIsLoading] = useState(false);\n\tconst [loadVisible, setLoadVisible] = useState(true);\n\tconst [count, setCount] = useState(10);\n\n\tconst firstLoad = useRef(true);\n\n\tconst location = useLocation();\n\n\tuseEffect(() => {\n\t\tfetchBreeds();\n\n\t\tlet params = queryString.parse(location.search);\n\t\tsetBreedLocation(params);\n\t}, [location]);\n\n\tuseEffect(() => {\n\t\tif (firstLoad.current) {\n\t    \tfirstLoad.current = false;\n\t    \treturn;\n\t    }\n\t    const fetchCats = async () => {\n\t    \tsetIsLoading(true);\n\t    \tconst res = await fetch(`https://api.thecatapi.com/v1/images/search?limit=100&page=100&breed_id=${breedSelected}`);\n\t    \tconst data = await res.json();\n\n\t    \tsetCatsList(data);\n\t    \tsetCount(10); // set first count every select of breed\n\t    \tsetIsLoading(false);\n\t    \tsetLoadVisible(true); // set the Load more button to visible\n\t    }\n\t\tfetchCats();\n\t}, [breedSelected]);\n\n\n\tconst fetchBreeds = async () => {\n\t\tsetIsLoading(true);\n\t\tconst res = await fetch('https://api.thecatapi.com/v1/breeds');\n\t\tconst data = await res.json();\n\n\t\tsetBreeds(data);\n\t\tsetIsLoading(false);\n\t}\n\n\tconst setBreedLocation = (params) => {\n\t\tsetBreedSelect(params.breed);\n\t}\n\n\tconst onBreedSelect = e => {\n\t\tsetBreedSelect(e.target.value);\n\t}\n\n\n\tconst loadMore = () => {\n\t\tsetIsLoading(true);\n\t\tsetTimeout(() => {\n\t\t    setCount(count + 4);\n\t\t\tsetIsLoading(false);\n\t\t\tsetLoadVisible(count < catsList.length);\n\t\t}, 500);\n\t}\n\n  \treturn (\n      \t<div className=\"home\">\n    \t    <Container>\n    \t      \t<h1>Cat Browser</h1>\n    \t\t    <Row>\n    \t\t      \t<Col xs={12} sm={6} md={3}>\n    \t\t      \t\t<Form.Group controlId=\"formBreedSelect\">\n    \t\t      \t\t\t<Form.Label>Breed</Form.Label>\n    \t\t      \t\t\t<Form.Control as=\"select\" onChange={ onBreedSelect } disabled={isLoading} value={breedSelected}>\n    \t\t      \t\t\t  \t<option value>Select breed</option>\n    \t\t      \t\t\t  {breeds.map(item => (\n    \t\t      \t\t\t  \t<option key={item.id} value={item.id}>{item.name}</option>\n    \t\t      \t\t\t  ))}\n    \t\t      \t\t\t</Form.Control>\n    \t\t\t\t    </Form.Group>\n    \t\t\t    </Col>\n    \t     \t</Row>\n    \t     \t<Row>\n    \t     \t\t{Array.isArray(catsList) && catsList.length === 0 ?\n    \t     \t\t\t <Col xs={12}>No Cats Available</Col> :\n    \t\t     \t\tcatsList.slice(0,count).map(cat => (\n    \t\t     \t\t\t<Cats\n    \t\t     \t\t\t\tkey={cat.id}\n    \t\t     \t\t\t\tid = {cat.id}\n    \t\t     \t\t\t\timageUrl = {cat.url}\n    \t\t     \t\t\t/>\n    \t\t     \t\t))\n    \t\t     \t}\n    \t     \t</Row>\n    \t     \t<Row>\n    \t     \t\t<Col xs={12} sm={6} md={3}>\n    \t     \t\t\t{ loadVisible ?\n    \t     \t\t\t\t<Button variant=\"success\" disabled={(Array.isArray(catsList) && catsList.length === 0) || isLoading} onClick={ loadMore }>{isLoading ? \"Loading Cat...\" : \"Load More\"}</Button>\n    \t     \t\t\t\t: \"\"\n    \t     \t\t\t}\n    \t     \t\t</Col>\n    \t     \t</Row>\n    \t    </Container>\n    \t</div>\n  \t);\n}\n\nexport default Home;","import React, { useState, useEffect } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\nimport Container from 'react-bootstrap/Container';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nfunction Cat({match}) {\n\tconst [catDetails, setCat] = useState({ breeds: [] });\n\tconst [catBreed, setCatBreed] = useState(\"\");\n\tconst [isLoading, setIsLoading] = useState(true);\n\tconst location = useLocation();\n\n\tuseEffect(() => {\n\t\tconst fetchCat = async () => {\n\t\t\tsetIsLoading(true);\n\t\t\t\tlet res;\n  \t\t\t\ttry {\n\t\t\t\t\tres = await fetch(`https://api.thecatapi.com/v1/images/${location.pathname.replace(\"/\",\"\")}`);\t\t\t\t\t\n\t\t\t\t} catch(error) {\n\t\t\t\t    return error;\n\t\t\t\t}\n\t\t\t\tif (!res.ok) {\n\t\t            return res;\n\t\t        }\n\t\t        const data = await res.json();\n\n\t\t        setCat(data);\n\n\t\t        setCatBreed(\"/?breed=\" + data.breeds[0].id);\n\t\t        setIsLoading(false);\n\t\t}\n\t\tfetchCat();\n\t}, [match, location.pathname]);\n\n\t\n\n\treturn (\n\t    <div className=\"cat\">\n\t    \t<Container>\n\t    \t\t{isLoading ?\n\t    \t\t\t<h4>Loading...</h4> :\n\t\t    \t\t<Card>\n\t\t    \t\t\t<Card.Header><Button variant=\"primary\" as={Link} to={catBreed}>Back</Button></Card.Header>\n\t\t\t    \t\t \t<Card.Img variant=\"top\" src={catDetails.url} />\n\t\t    \t\t \t\t{ Array.isArray(catDetails.breeds) ?\n\t\t    \t\t \t\t    catDetails.breeds.map( details => (\n\t\t    \t\t \t\t\t\t<Card.Body key={details.id}>\n\t\t\t    \t\t \t\t        <h4>{ details.name}</h4> \n\t\t\t    \t\t \t\t        <h5>Origin: { details.origin }</h5>\n\t\t\t    \t\t \t\t        <h6>{details.temperament}</h6>\n\t\t\t    \t\t \t\t        <p>{details.description}</p>\n\t\t    \t\t \t\t\t\t</Card.Body>\n\t\t    \t\t \t\t    ))\n\t\t    \t\t \t\t    :  \"\" }\n\t\t    \t\t</Card> }\n\t    \t</Container>\n\t    </div>\n\t);\n}\n\nexport default Cat;\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Home from './components/Home';\nimport Cat from './components/Cat';\n\nimport './App.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n  \t<Router basename={process.env.PUBLIC_URL}>\n\t\t<Route path=\"/\" exact component={Home} />\n\t\t<Route path=\"/:id\" component={Cat} />\n\t</Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}